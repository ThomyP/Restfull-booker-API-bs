{
  "collection": {
    "_": {
      "postman_id": "25164c3b-7bc5-4a55-9da1-17e694fc01c3",
      "exporter_id": "15497739",
      "collection_link": "https://bt-js-test20241218.postman.co/workspace/demo_workspace~91abd546-b4d4-4c44-a2b5-53528403e57b/collection/15497739-25164c3b-7bc5-4a55-9da1-17e694fc01c3?action=share&source=collection_link&creator=15497739"
    },
    "item": [
      {
        "id": "941fe329-ed3a-4ee0-ac15-c3cfc8cd1fe2",
        "name": "Create token",
        "request": {
          "url": {
            "path": [
              "auth"
            ],
            "host": [
              "{{base-url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "693911fd-352e-4663-9887-e463915c6631",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test('Response status code 200', function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "pm.test('Check responseBody', () => {\r",
                "    const responseBody = pm.response.json();\r",
                "\r",
                "    console.log(pm.environment.get('base-url'));\r",
                "    console.log(pm.environment.get('authKey'));\r",
                "\r",
                "    pm.expect(responseBody).to.be.an('object');\r",
                "    pm.expect(responseBody.token).to.be.a('string').and.not.empty;\r",
                "});\r",
                "\r",
                "pm.test(\"Response time is less than 500ms\", function () {\r",
                "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                "});\r",
                "\r",
                "pm.collectionVariables.set('token', pm.response.json());\r",
                ""
              ],
              "_lastExecutionId": "7a8fd00e-0cb7-4691-bcfd-7a66e05383b8"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "11620ff3-a5bf-47ff-8ac5-4c07dec3e163",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "a055a99e-47f7-4652-bbc2-72548565e777"
            }
          }
        ]
      },
      {
        "id": "ff5f157b-6ead-44ce-84b4-42199a03ab9d",
        "name": "With all required data",
        "request": {
          "url": {
            "path": [
              "booking"
            ],
            "host": [
              "{{base-url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3fbab56-a704-4aed-a0a0-4b22ecbf4e0c",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "function rand(min, max) {\r",
                "  const minCeiled = Math.ceil(min);\r",
                "  const maxFloored = Math.floor(max);\r",
                "  return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive\r",
                "}\r",
                "\r",
                "let randomNumber = rand(1, 30); \r",
                "\r",
                "\r",
                "pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
                "\r",
                "const newBook = {\r",
                "    \"firstname\": \"Vardenis\",\r",
                "    \"lastname\": \"Pavardenis\",\r",
                "    \"totalprice\": randomNumber,\r",
                "    \"depositpaid\": true,\r",
                "    \"bookingdates\" : {\r",
                "        \"checkin\": \"2025-03-31\",\r",
                "        \"checkout\": \"2025-04-09\"\r",
                "    },\r",
                "    \"additionalneeds\": \"Pizza\"\r",
                "};\r",
                "\r",
                "pm.request.body.raw = newBook;"
              ],
              "_lastExecutionId": "7997625a-2686-4ac7-8fef-3a42799d477b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31cedf72-365b-4d10-9c42-8b752370619d",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.collectionVariables.set('first-name', pm.response.json().booking.firstname);\r",
                "pm.collectionVariables.set('last-name', pm.response.json().booking.lastname);\r",
                "pm.collectionVariables.set('randomNumber', pm.response.json().booking.totalprice);\r",
                "pm.collectionVariables.set('deposit-paid', pm.response.json().booking.depositpaid);\r",
                "pm.collectionVariables.set('check-in', pm.response.json().booking.bookingdates.checkin);\r",
                "pm.collectionVariables.set('check-out', pm.response.json().booking.bookingdates.checkout);\r",
                "\r",
                "const bookingId = pm.collectionVariables.set('bookingid', pm.response.json().bookingid);\r",
                "\r",
                "\r",
                "pm.test(\"Response time is less than 1000ms\", function () {\r",
                "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                "});\r",
                "\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "pm.test(\"Checking properties\", function () {\r",
                "    const jsonData = pm.response.json();\r",
                "    pm.expect(jsonData.bookingid).to.be.a('number').and.is.not.null;\r",
                "\r",
                "    pm.expect(jsonData.booking.firstname).to.eql(pm.collectionVariables.get('first-name')).and.to.be.a('string');\r",
                "    pm.expect(jsonData.booking.lastname).to.eql(pm.collectionVariables.get('last-name')).and.to.be.a('string');\r",
                "\r",
                "    pm.expect(jsonData.booking.totalprice).to.eql(pm.collectionVariables.get('randomNumber')).and.to.be.a('number');;\r",
                "\r",
                "    pm.expect(jsonData.booking.depositpaid).to.eql(pm.collectionVariables.get('deposit-paid')).and.to.be.a('boolean');\r",
                "\r",
                "    pm.expect(jsonData.booking.bookingdates).to.be.an('object').and.is.not.null;\r",
                "\r",
                "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(pm.collectionVariables.get('check-in')).to.be.a('string').and.is.not.empty;\r",
                "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(pm.collectionVariables.get('check-out')).to.be.a('string').and.is.not.empty;\r",
                "});"
              ],
              "_lastExecutionId": "c08447b7-aef2-498e-98f9-ac5aee659439"
            }
          }
        ]
      },
      {
        "id": "d08ce5e8-1da3-4289-94e8-6b31c632a185",
        "name": "Get booking by id Copy",
        "request": {
          "url": {
            "path": [
              "booking",
              "{{bookingid}}"
            ],
            "host": [
              "{{base-url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "fb7520ae-b007-41d8-b96d-ac37d9594dad",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test('Response status code 200', () => {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "pm.test('Check properties', () => {\r",
                "    const responseBody = pm.response.json();\r",
                "\r",
                "    pm.expect(responseBody).to.be.an('object');\r",
                "    pm.expect(responseBody).to.have.property('firstname').to.be.a('string');\r",
                "    pm.expect(responseBody).to.have.property('lastname').to.be.a('string');\r",
                "    pm.expect(responseBody).to.have.property('totalprice').to.be.a('number');\r",
                "    pm.expect(responseBody).to.have.property('depositpaid').to.be.a('boolean');\r",
                "\r",
                "    pm.expect(responseBody).to.have.property('bookingdates').to.be.an('object');\r",
                "\r",
                "    pm.expect(responseBody.bookingdates).to.have.property('checkin').to.be.a('string');\r",
                "    pm.expect(responseBody.bookingdates).to.have.property('checkout').to.be.a('string');\r",
                "});\r",
                "\r",
                "\r",
                "pm.test('Check if data is correct', () => {\r",
                "    const responseBody = pm.response.json();\r",
                "    \r",
                "    pm.expect(responseBody.firstname).to.be.eql(pm.collectionVariables.get('first-name'));\r",
                "    pm.expect(responseBody.lastname).to.be.eql(pm.collectionVariables.get('last-name'));\r",
                "\r",
                "    pm.expect(responseBody.totalprice).to.be.eql(pm.collectionVariables.get('randomNumber'));\r",
                "\r",
                "    pm.expect(responseBody.depositpaid).to.be.eql(pm.collectionVariables.get('deposit-paid'));\r",
                "\r",
                "    pm.expect(responseBody.bookingdates.checkin).to.be.eql('2025-03-31');\r",
                "    pm.expect(responseBody.bookingdates.checkout).to.be.eql('2025-04-09');\r",
                "});\r",
                "\r",
                "pm.test(\"Response time is less than 500ms\", () => {\r",
                "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                "});"
              ],
              "_lastExecutionId": "7c89241a-d4c9-4280-9c80-a1dddfd82ac8"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "1e694658-a144-4a3c-adcd-972d96e0c391",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "8bf8cc43-4409-4be9-8e08-99adfcbb7ebe"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "token"
      },
      {
        "type": "any",
        "value": "",
        "key": "randomNumber"
      },
      {
        "type": "any",
        "value": "",
        "key": "first-name"
      },
      {
        "type": "any",
        "value": "",
        "key": "last-name"
      },
      {
        "type": "any",
        "value": "",
        "key": "deposit-paid"
      },
      {
        "type": "any",
        "value": "",
        "key": "check-in"
      },
      {
        "type": "any",
        "value": "",
        "key": "check-out"
      },
      {
        "type": "any",
        "value": "",
        "key": "bookingid"
      }
    ],
    "info": {
      "_postman_id": "25164c3b-7bc5-4a55-9da1-17e694fc01c3",
      "name": "restful-booker-tst",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-04-16T05:37:51.088Z",
      "postman_exported_using": "Postman/11.41.1"
    },
    "id": "9e172b8b-e215-440f-8c08-7df56e24e148",
    "name": "env_restful_booker",
    "values": [
      {
        "type": "any",
        "value": "https://restful-booker.herokuapp.com",
        "key": "base-url"
      },
      {
        "type": "any",
        "value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
        "key": "authKey"
      }
    ]
  },
  "globals": {
    "id": "6daf617d-ed87-42ca-b82e-220d0838e7b6",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 10,
        "pending": 0,
        "failed": 1
      },
      "testScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 1370,
      "responseMin": 321,
      "responseMax": 3401,
      "responseSd": 1436.3943284024297,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1744800316607,
      "completed": 1744800320981
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7730076d-bd17-4003-a0bb-d1e109a3d898",
          "httpRequestId": "9724cc81-6494-4649-88a4-9bce1f736d44"
        },
        "item": {
          "id": "941fe329-ed3a-4ee0-ac15-c3cfc8cd1fe2",
          "name": "Create token",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{base-url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "693911fd-352e-4663-9887-e463915c6631",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Response status code 200', function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Check responseBody', () => {\r",
                  "    const responseBody = pm.response.json();\r",
                  "\r",
                  "    console.log(pm.environment.get('base-url'));\r",
                  "    console.log(pm.environment.get('authKey'));\r",
                  "\r",
                  "    pm.expect(responseBody).to.be.an('object');\r",
                  "    pm.expect(responseBody.token).to.be.a('string').and.not.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set('token', pm.response.json());\r",
                  ""
                ],
                "_lastExecutionId": "7a8fd00e-0cb7-4691-bcfd-7a66e05383b8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11620ff3-a5bf-47ff-8ac5-4c07dec3e163",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a055a99e-47f7-4652-bbc2-72548565e777"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e8469c18-bc32-4389-8cba-790cbab58e1d",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "61",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "1a4e5f1f-443d-4d35-95dc-3f96b130adae",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744800319&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=00gviJDW8%2FOTHUkJ1KxoSOOYfEuLQ0mACAkm4Iz4awU%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1744800319&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=00gviJDW8%2FOTHUkJ1KxoSOOYfEuLQ0mACAkm4Iz4awU%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "27"
            },
            {
              "key": "Etag",
              "value": "W/\"1b-rWSUayTyOxp5vWjndPjilIlOPLY\""
            },
            {
              "key": "Date",
              "value": "Wed, 16 Apr 2025 10:45:19 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              55,
              56,
              52,
              55,
              51,
              101,
              102,
              56,
              56,
              49,
              53,
              101,
              50,
              54,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3401,
          "responseSize": 27
        },
        "id": "941fe329-ed3a-4ee0-ac15-c3cfc8cd1fe2",
        "assertions": [
          {
            "assertion": "Response status code 200",
            "skipped": false
          },
          {
            "assertion": "Check responseBody",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected 3401 to be below 500",
              "stack": "AssertionError: expected 3401 to be below 500\n   at Object.eval sandbox-script.js:3:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3a6206ac-6065-42ac-bf23-781b8bd507b9",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "106ebc3a-7d32-4324-91fd-554337212434"
        },
        "item": {
          "id": "ff5f157b-6ead-44ce-84b4-42199a03ab9d",
          "name": "With all required data",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{base-url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e3fbab56-a704-4aed-a0a0-4b22ecbf4e0c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "function rand(min, max) {\r",
                  "  const minCeiled = Math.ceil(min);\r",
                  "  const maxFloored = Math.floor(max);\r",
                  "  return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive\r",
                  "}\r",
                  "\r",
                  "let randomNumber = rand(1, 30); \r",
                  "\r",
                  "\r",
                  "pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
                  "\r",
                  "const newBook = {\r",
                  "    \"firstname\": \"Vardenis\",\r",
                  "    \"lastname\": \"Pavardenis\",\r",
                  "    \"totalprice\": randomNumber,\r",
                  "    \"depositpaid\": true,\r",
                  "    \"bookingdates\" : {\r",
                  "        \"checkin\": \"2025-03-31\",\r",
                  "        \"checkout\": \"2025-04-09\"\r",
                  "    },\r",
                  "    \"additionalneeds\": \"Pizza\"\r",
                  "};\r",
                  "\r",
                  "pm.request.body.raw = newBook;"
                ],
                "_lastExecutionId": "7997625a-2686-4ac7-8fef-3a42799d477b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31cedf72-365b-4d10-9c42-8b752370619d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.collectionVariables.set('first-name', pm.response.json().booking.firstname);\r",
                  "pm.collectionVariables.set('last-name', pm.response.json().booking.lastname);\r",
                  "pm.collectionVariables.set('randomNumber', pm.response.json().booking.totalprice);\r",
                  "pm.collectionVariables.set('deposit-paid', pm.response.json().booking.depositpaid);\r",
                  "pm.collectionVariables.set('check-in', pm.response.json().booking.bookingdates.checkin);\r",
                  "pm.collectionVariables.set('check-out', pm.response.json().booking.bookingdates.checkout);\r",
                  "\r",
                  "const bookingId = pm.collectionVariables.set('bookingid', pm.response.json().bookingid);\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is less than 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Checking properties\", function () {\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.bookingid).to.be.a('number').and.is.not.null;\r",
                  "\r",
                  "    pm.expect(jsonData.booking.firstname).to.eql(pm.collectionVariables.get('first-name')).and.to.be.a('string');\r",
                  "    pm.expect(jsonData.booking.lastname).to.eql(pm.collectionVariables.get('last-name')).and.to.be.a('string');\r",
                  "\r",
                  "    pm.expect(jsonData.booking.totalprice).to.eql(pm.collectionVariables.get('randomNumber')).and.to.be.a('number');;\r",
                  "\r",
                  "    pm.expect(jsonData.booking.depositpaid).to.eql(pm.collectionVariables.get('deposit-paid')).and.to.be.a('boolean');\r",
                  "\r",
                  "    pm.expect(jsonData.booking.bookingdates).to.be.an('object').and.is.not.null;\r",
                  "\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(pm.collectionVariables.get('check-in')).to.be.a('string').and.is.not.empty;\r",
                  "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(pm.collectionVariables.get('check-out')).to.be.a('string').and.is.not.empty;\r",
                  "});"
                ],
                "_lastExecutionId": "c08447b7-aef2-498e-98f9-ac5aee659439"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ff4ab432-bddb-4ff5-a748-c4456a780781",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "172",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": {
              "firstname": "Vardenis",
              "lastname": "Pavardenis",
              "totalprice": 6,
              "depositpaid": true,
              "bookingdates": {
                "checkin": "2025-03-31",
                "checkout": "2025-04-09"
              },
              "additionalneeds": "Pizza"
            },
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "dfd3a984-af96-449e-a908-f61e566102f1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744800320&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ZP1DGGCW1yK%2BjxxuSJK%2BvRyPOiX9ninpeQFbMwB7pwA%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1744800320&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ZP1DGGCW1yK%2BjxxuSJK%2BvRyPOiX9ninpeQFbMwB7pwA%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "201"
            },
            {
              "key": "Etag",
              "value": "W/\"c9-7+jH1Q8E9LylFiJnoLMdCXWju6c\""
            },
            {
              "key": "Date",
              "value": "Wed, 16 Apr 2025 10:45:20 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              51,
              55,
              54,
              53,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              118,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              54,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              51,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              48,
              57,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              80,
              105,
              122,
              122,
              97,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 321,
          "responseSize": 201
        },
        "id": "ff5f157b-6ead-44ce-84b4-42199a03ab9d",
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Checking properties",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fa22ab26-a5c7-43f7-9e7e-d01f976dea5c",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "051ca562-fa40-49ab-968a-dfd2bce15748"
        },
        "item": {
          "id": "d08ce5e8-1da3-4289-94e8-6b31c632a185",
          "name": "Get booking by id Copy",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingid}}"
              ],
              "host": [
                "{{base-url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fb7520ae-b007-41d8-b96d-ac37d9594dad",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Response status code 200', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Check properties', () => {\r",
                  "    const responseBody = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseBody).to.be.an('object');\r",
                  "    pm.expect(responseBody).to.have.property('firstname').to.be.a('string');\r",
                  "    pm.expect(responseBody).to.have.property('lastname').to.be.a('string');\r",
                  "    pm.expect(responseBody).to.have.property('totalprice').to.be.a('number');\r",
                  "    pm.expect(responseBody).to.have.property('depositpaid').to.be.a('boolean');\r",
                  "\r",
                  "    pm.expect(responseBody).to.have.property('bookingdates').to.be.an('object');\r",
                  "\r",
                  "    pm.expect(responseBody.bookingdates).to.have.property('checkin').to.be.a('string');\r",
                  "    pm.expect(responseBody.bookingdates).to.have.property('checkout').to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test('Check if data is correct', () => {\r",
                  "    const responseBody = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseBody.firstname).to.be.eql(pm.collectionVariables.get('first-name'));\r",
                  "    pm.expect(responseBody.lastname).to.be.eql(pm.collectionVariables.get('last-name'));\r",
                  "\r",
                  "    pm.expect(responseBody.totalprice).to.be.eql(pm.collectionVariables.get('randomNumber'));\r",
                  "\r",
                  "    pm.expect(responseBody.depositpaid).to.be.eql(pm.collectionVariables.get('deposit-paid'));\r",
                  "\r",
                  "    pm.expect(responseBody.bookingdates.checkin).to.be.eql('2025-03-31');\r",
                  "    pm.expect(responseBody.bookingdates.checkout).to.be.eql('2025-04-09');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", () => {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});"
                ],
                "_lastExecutionId": "7c89241a-d4c9-4280-9c80-a1dddfd82ac8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1e694658-a144-4a3c-adcd-972d96e0c391",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8bf8cc43-4409-4be9-8e08-99adfcbb7ebe"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "3765"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2e11907f-e4ad-49e8-b39f-c5908d5c28a3",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "254",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "f49d821f-fe19-415c-9fc5-922bd769cfec",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Cowboy"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744800320&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ZP1DGGCW1yK%2BjxxuSJK%2BvRyPOiX9ninpeQFbMwB7pwA%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1744800320&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ZP1DGGCW1yK%2BjxxuSJK%2BvRyPOiX9ninpeQFbMwB7pwA%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "172"
            },
            {
              "key": "Etag",
              "value": "W/\"ac-MVoHEJId+PLcvFcDdtedVCLuLnA\""
            },
            {
              "key": "Date",
              "value": "Wed, 16 Apr 2025 10:45:20 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              86,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              118,
              97,
              114,
              100,
              101,
              110,
              105,
              115,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              54,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              51,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              52,
              45,
              48,
              57,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              80,
              105,
              122,
              122,
              97,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 388,
          "responseSize": 172
        },
        "id": "d08ce5e8-1da3-4289-94e8-6b31c632a185",
        "assertions": [
          {
            "assertion": "Response status code 200",
            "skipped": false
          },
          {
            "assertion": "Check properties",
            "skipped": false
          },
          {
            "assertion": "Check if data is correct",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 400
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected 3401 to be below 500",
          "stack": "AssertionError: expected 3401 to be below 500\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "d72f1456f3c4551cd6d198ee22212e84",
          "id": "d30b3170-a42a-44d9-8284-3a1ec58265e2",
          "timestamp": 1744800320097,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "941fe329-ed3a-4ee0-ac15-c3cfc8cd1fe2",
          "name": "Create token",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{base-url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "693911fd-352e-4663-9887-e463915c6631",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Response status code 200', function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Check responseBody', () => {\r",
                  "    const responseBody = pm.response.json();\r",
                  "\r",
                  "    console.log(pm.environment.get('base-url'));\r",
                  "    console.log(pm.environment.get('authKey'));\r",
                  "\r",
                  "    pm.expect(responseBody).to.be.an('object');\r",
                  "    pm.expect(responseBody.token).to.be.a('string').and.not.empty;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set('token', pm.response.json());\r",
                  ""
                ],
                "_lastExecutionId": "7a8fd00e-0cb7-4691-bcfd-7a66e05383b8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11620ff3-a5bf-47ff-8ac5-4c07dec3e163",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a055a99e-47f7-4652-bbc2-72548565e777"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "25164c3b-7bc5-4a55-9da1-17e694fc01c3",
            "exporter_id": "15497739",
            "collection_link": "https://bt-js-test20241218.postman.co/workspace/demo_workspace~91abd546-b4d4-4c44-a2b5-53528403e57b/collection/15497739-25164c3b-7bc5-4a55-9da1-17e694fc01c3?action=share&source=collection_link&creator=15497739"
          },
          "item": [
            {
              "id": "941fe329-ed3a-4ee0-ac15-c3cfc8cd1fe2",
              "name": "Create token",
              "request": {
                "url": {
                  "path": [
                    "auth"
                  ],
                  "host": [
                    "{{base-url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "693911fd-352e-4663-9887-e463915c6631",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Response status code 200', function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Check responseBody', () => {\r",
                      "    const responseBody = pm.response.json();\r",
                      "\r",
                      "    console.log(pm.environment.get('base-url'));\r",
                      "    console.log(pm.environment.get('authKey'));\r",
                      "\r",
                      "    pm.expect(responseBody).to.be.an('object');\r",
                      "    pm.expect(responseBody.token).to.be.a('string').and.not.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set('token', pm.response.json());\r",
                      ""
                    ],
                    "_lastExecutionId": "7a8fd00e-0cb7-4691-bcfd-7a66e05383b8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "11620ff3-a5bf-47ff-8ac5-4c07dec3e163",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a055a99e-47f7-4652-bbc2-72548565e777"
                  }
                }
              ]
            },
            {
              "id": "ff5f157b-6ead-44ce-84b4-42199a03ab9d",
              "name": "With all required data",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{base-url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : \"false\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e3fbab56-a704-4aed-a0a0-4b22ecbf4e0c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "function rand(min, max) {\r",
                      "  const minCeiled = Math.ceil(min);\r",
                      "  const maxFloored = Math.floor(max);\r",
                      "  return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive\r",
                      "}\r",
                      "\r",
                      "let randomNumber = rand(1, 30); \r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
                      "\r",
                      "const newBook = {\r",
                      "    \"firstname\": \"Vardenis\",\r",
                      "    \"lastname\": \"Pavardenis\",\r",
                      "    \"totalprice\": randomNumber,\r",
                      "    \"depositpaid\": true,\r",
                      "    \"bookingdates\" : {\r",
                      "        \"checkin\": \"2025-03-31\",\r",
                      "        \"checkout\": \"2025-04-09\"\r",
                      "    },\r",
                      "    \"additionalneeds\": \"Pizza\"\r",
                      "};\r",
                      "\r",
                      "pm.request.body.raw = newBook;"
                    ],
                    "_lastExecutionId": "7997625a-2686-4ac7-8fef-3a42799d477b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31cedf72-365b-4d10-9c42-8b752370619d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.collectionVariables.set('first-name', pm.response.json().booking.firstname);\r",
                      "pm.collectionVariables.set('last-name', pm.response.json().booking.lastname);\r",
                      "pm.collectionVariables.set('randomNumber', pm.response.json().booking.totalprice);\r",
                      "pm.collectionVariables.set('deposit-paid', pm.response.json().booking.depositpaid);\r",
                      "pm.collectionVariables.set('check-in', pm.response.json().booking.bookingdates.checkin);\r",
                      "pm.collectionVariables.set('check-out', pm.response.json().booking.bookingdates.checkout);\r",
                      "\r",
                      "const bookingId = pm.collectionVariables.set('bookingid', pm.response.json().bookingid);\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Checking properties\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.bookingid).to.be.a('number').and.is.not.null;\r",
                      "\r",
                      "    pm.expect(jsonData.booking.firstname).to.eql(pm.collectionVariables.get('first-name')).and.to.be.a('string');\r",
                      "    pm.expect(jsonData.booking.lastname).to.eql(pm.collectionVariables.get('last-name')).and.to.be.a('string');\r",
                      "\r",
                      "    pm.expect(jsonData.booking.totalprice).to.eql(pm.collectionVariables.get('randomNumber')).and.to.be.a('number');;\r",
                      "\r",
                      "    pm.expect(jsonData.booking.depositpaid).to.eql(pm.collectionVariables.get('deposit-paid')).and.to.be.a('boolean');\r",
                      "\r",
                      "    pm.expect(jsonData.booking.bookingdates).to.be.an('object').and.is.not.null;\r",
                      "\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(pm.collectionVariables.get('check-in')).to.be.a('string').and.is.not.empty;\r",
                      "    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(pm.collectionVariables.get('check-out')).to.be.a('string').and.is.not.empty;\r",
                      "});"
                    ],
                    "_lastExecutionId": "c08447b7-aef2-498e-98f9-ac5aee659439"
                  }
                }
              ]
            },
            {
              "id": "d08ce5e8-1da3-4289-94e8-6b31c632a185",
              "name": "Get booking by id Copy",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingid}}"
                  ],
                  "host": [
                    "{{base-url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\" : \"Vardenis\",\r\n    \"lastname\" : \"Pavardenis\",\r\n    \"totalprice\" : 12,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-03-31\",\r\n        \"checkout\" : \"2025-04-09\"\r\n    },\r\n    \"additionalneeds\" : \"Pizza\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fb7520ae-b007-41d8-b96d-ac37d9594dad",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Response status code 200', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Check properties', () => {\r",
                      "    const responseBody = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseBody).to.be.an('object');\r",
                      "    pm.expect(responseBody).to.have.property('firstname').to.be.a('string');\r",
                      "    pm.expect(responseBody).to.have.property('lastname').to.be.a('string');\r",
                      "    pm.expect(responseBody).to.have.property('totalprice').to.be.a('number');\r",
                      "    pm.expect(responseBody).to.have.property('depositpaid').to.be.a('boolean');\r",
                      "\r",
                      "    pm.expect(responseBody).to.have.property('bookingdates').to.be.an('object');\r",
                      "\r",
                      "    pm.expect(responseBody.bookingdates).to.have.property('checkin').to.be.a('string');\r",
                      "    pm.expect(responseBody.bookingdates).to.have.property('checkout').to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test('Check if data is correct', () => {\r",
                      "    const responseBody = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseBody.firstname).to.be.eql(pm.collectionVariables.get('first-name'));\r",
                      "    pm.expect(responseBody.lastname).to.be.eql(pm.collectionVariables.get('last-name'));\r",
                      "\r",
                      "    pm.expect(responseBody.totalprice).to.be.eql(pm.collectionVariables.get('randomNumber'));\r",
                      "\r",
                      "    pm.expect(responseBody.depositpaid).to.be.eql(pm.collectionVariables.get('deposit-paid'));\r",
                      "\r",
                      "    pm.expect(responseBody.bookingdates.checkin).to.be.eql('2025-03-31');\r",
                      "    pm.expect(responseBody.bookingdates.checkout).to.be.eql('2025-04-09');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 500ms\", () => {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});"
                    ],
                    "_lastExecutionId": "7c89241a-d4c9-4280-9c80-a1dddfd82ac8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1e694658-a144-4a3c-adcd-972d96e0c391",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "8bf8cc43-4409-4be9-8e08-99adfcbb7ebe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "token"
            },
            {
              "type": "any",
              "value": "",
              "key": "randomNumber"
            },
            {
              "type": "any",
              "value": "",
              "key": "first-name"
            },
            {
              "type": "any",
              "value": "",
              "key": "last-name"
            },
            {
              "type": "any",
              "value": "",
              "key": "deposit-paid"
            },
            {
              "type": "any",
              "value": "",
              "key": "check-in"
            },
            {
              "type": "any",
              "value": "",
              "key": "check-out"
            },
            {
              "type": "any",
              "value": "",
              "key": "bookingid"
            }
          ],
          "info": {
            "_postman_id": "25164c3b-7bc5-4a55-9da1-17e694fc01c3",
            "name": "restful-booker-tst",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7730076d-bd17-4003-a0bb-d1e109a3d898",
          "httpRequestId": "9724cc81-6494-4649-88a4-9bce1f736d44",
          "scriptId": "693911fd-352e-4663-9887-e463915c6631",
          "execution": "7a8fd00e-0cb7-4691-bcfd-7a66e05383b8"
        }
      }
    ],
    "error": null
  }
}